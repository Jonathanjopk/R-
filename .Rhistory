0.001*0.3315
0.001*1.0215
0.001*0.5193
0.0001*1.4248
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
rm(list=ls())
library(readxl)
data=read_excel("awesome2.xlsx",1)
attach(data)
head(data)
tmp.confident2=消費者信心[(1+1):length(消費者信心)]
tmp.confident3=消費者信心[(1+2):length(消費者信心)]
confident.two.rise= (tmp.confident3-tmp.confident2>0)&(tmp.confident2-消費者信心>0)
tail(confident.two.rise)
消費者信心
tmp.confident2
tmp.confident3
length(消費者信心)
tmp.unemployment2=失業率[(1+1):length(失業率)]
tmp.unemployment3=失業率[(1+2):length(失業率)]
length(失業率);length(unemployment2);length(unemployment3)
tmp.unemployment2=失業率[(1+1):length(失業率)]
tmp.unemployment3=失業率[(1+2):length(失業率)]
length(失業率);length(tmp.unemployment2);length(tmp.unemployment3)
unemployment.two.fall=(tmp.unemployment3-tmp.unemployment2<0)&(tmp.unemployment2-失業率<0)
tmp.unemployment1=失業率 ; tmp.unemployment1=tmp.unemployment1[(1+2):length(tmp.unemployment1)]
tmp.unemployment2=失業率[(1+1):length(失業率)] ; tmp.unemployment2=tmp.unemployment2[(1+1):length(tmp.unemployment2)]
tmp.unemployment3=失業率[(1+2):length(失業率)]
unemployment.two.fall=(tmp.unemployment3-tmp.unemployment2<0)&(tmp.unemployment2-失業率<0)
length(失業率);length(tmp.unemployment2);length(tmp.unemployment3)
length(tmp.unemployment1);length(tmp.unemployment2);length(tmp.unemployment3)
tmp.unemployment1=失業率 ; tmp.unemployment1=tmp.unemployment1[(1+2):length(tmp.unemployment1)]
tmp.unemployment2=失業率[(1+1):length(失業率)] ; tmp.unemployment2=tmp.unemployment2[(1+1):length(tmp.unemployment2)]
tmp.unemployment3=失業率[(1+2):length(失業率)]
length(tmp.unemployment1);length(tmp.unemployment2);length(tmp.unemployment3)
unemployment.two.fall=(tmp.unemployment3-tmp.unemployment2<0)&(tmp.unemployment2-失業率<0)
tmp.unemployment1
tmp.unemployment2
tmp.unemployment3
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
rm(list=ls())
library(readxl)
data=read_excel("awesome2.xlsx",1)
attach(data)
head(data)
data
head(data)
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
rm(list=ls())
library(readxl)
data=read_excel("awesome2.xlsx",1)
attach(data)
head(data)
CI=消費者信心
Unemploy=失業率
interest=利率
CPI=物價指數
ex=匯率
head(data)
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
rm(list=ls())
library(readxl)
data=read_excel("awesome2.xlsx",2)
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
rm(list=ls())
library(readxl)
data=read_excel("awesome2.xlsx",2)
library(readxl)
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
rm(list=ls())
library(readxl)
data=read_excel("awesome2.xlsx",2)
attach(data)
head(data)
exchange=匯率
rdc.model=lm(y~0)
y=JP_NKY_FutureExpect
rdc.model=lm(y~0)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+失業率+消費者信心+利率+Unemploy_rise+CI_rise+interest_rise)^5))
summary(fwd.model)
rdc.model=lm(y~0)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+Unemploy_rise+CI_rise+interest_rise)^5))
summary(fwd.model)
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
rm(list=ls())
library(readxl)
data=read_excel("awesome2.xlsx",2)
attach(data)
head(data)
exchange=匯率
y=JP_NKY_FutureExpect
rdc.model=lm(y~0)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+Unemploy_rise+CI_rise+interest_rise)^5))
summary(fwd.model)
rdc.model=lm(y~0)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+失業率+消費者信心+利率+Unemploy_rise+CI_rise+interest_rise)^5))
summary(fwd.model)
rise=c()
for(i in 1:(length(日經)-1)){
if(日經[i+1]-日經[i]>0){
rise[i]=1
}else{
rise[i]=0
}
}
rise
library(xlsx)
rise=as.data.frame(rise)
install.packages("xlsx")
library(xlsx)
write.csv(rise,"rise.csv")
summary(predict(fwd.model)))
summary(predict(fwd.model))
length(predict(fwd.model))
length(rise)
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
rm(list=ls())
library(readxl)
data=read_excel("awesome2.xlsx",2)
attach(data)
head(data)
exchange=匯率
y=JP_NKY_FutureExpect
rdc.model=lm(y~0)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+失業率+消費者信心+利率+Unemploy_rise+CI_rise+interest_rise)^5))
length(predict(fwd.model))
length(rise)
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
k[j]=sum(Success)/sum(Success+Fail)
}
Buy=(predict(fwd.model))>which.max(k)
max(k)
max(k,na.rm = T)
k
times=sum(Buy,na.rm = T)
time
times
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>30){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
k
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>20){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
k
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
k
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>5){
k[j]=sum(Success)/sum(Success+Fail)
}
}
k
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
rm(list=ls())
library(readxl)
data=read_excel("awesome2.xlsx",2)
attach(data)
head(data)
exchange=匯率
y=JP_NKY_FutureExpect
rdc.model=lm(y~0)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+失業率+消費者信心+利率+Unemploy_rise+CI_rise+interest_rise)^5))
rdc.model=lm(y~0)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+失業率+消費者信心+利率+Unemploy_rise+CI_rise+interest_rise)^5))
attach(data)
head(data)
exchange=匯率
y=JP_NKY_FutureExpect
rdc.model=lm(y~0)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+失業率+消費者信心+利率+Unemploy_rise+CI_rise+interest_rise)^5))
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>5){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>15){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
summary(fwd.model)
fwd.model=lm(formula = y ~ CI_rise + interest_rise + Unemploy_rise + exchange +
interest_rise:exchange - 1)
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+Unemploy_rise+CI_rise+interest_rise)^5))
summary(fwd.model)
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+Unemploy_rise+CI_rise+interest_rise)^5))
summary(fwd.model)
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
rm(list=ls())
library(readxl)
data=read_excel("awesome2.xlsx",2)
attach(data)
head(data)
exchange=匯率
y=JP_NKY_FutureExpect
rdc.model=lm(y~0)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+Unemploy_rise+CI_rise+interest_rise)^5))
summary(fwd.model)
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+Unemploy_rise+CI_rise+interest_rise)^5))
summary(fwd.model)
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
summary(fwd.model)
fwd.model=lm(formula = y ~ CI_rise + interest_rise + Unemploy_rise + exchange +
interest_rise:exchange - 1)
fwd.model=lm(formula = y ~ CI_rise + interest_rise + Unemploy_rise + exchange +
interest_rise:exchange - 1)
fwd.model=lm(formula = y ~ CI_rise + interest_rise + Unemploy_rise + exchange +
interest_rise:exchange - 1)
summary(fwd.model)
head(data)
fwd.model=lm(formula = y ~ CI_rise + interest_rise + Unemploy_rise + exchange +
- 1)
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
fwd.model=lm(formula = y ~ CI_rise + interest_rise + Unemploy_rise + exchange +
- 1)
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
summary(fwd.model)
fwd.model=lm(formula = y ~ CI_rise + interest_rise + Unemploy_rise + exchange + )
fwd.model=lm(formula = y ~ CI_rise + interest_rise + Unemploy_rise + exchange )
summary(fwd.model)
head(data)
log(10^6)
rdc.model=lm(y~0)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+exchange+失業率+消費者信心+利率+Unemploy_rise+CI_rise+interest_rise)^5))
k=c()
for(j in 100:1800){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1)
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
summary(fwd.model)
dev.new
dev.new()
dev.new()
dev.new()
?qqplot
?ar
?qqplot
x=1:10
qqplot(x)
qqplot(x,2:11)
qqnorm(x)
setwd("C:/Users/RayCheng/Dropbox/R 期末報告")
rm(list=ls())
library(readxl)
data=read_excel("awesome2.xlsx",2)
attach(data)
head(data)
y=Nikkei_exp3
reg1=lm(y~log(GDP)+CPI+Interest+CC+Unemploy+Exchange+t)
summary(reg1)
AIC(reg1)
k=c()
for(j in 65:1400){
Buy=(predict(reg1))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1) #出手：(1,1)=0,(1,0)=1 沒有出手：(0,1)=0,(0,0)=0
if(sum(Buy,na.rm = T)>64){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(reg1))>which.max(k)
k
summary(reg1)
k=c()
for(j in 65:1400){
Buy=(predict(reg1))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1) #出手：(1,1)=0,(1,0)=1 沒有出手：(0,1)=0,(0,0)=0
if(sum(Buy,na.rm = T)>10){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(reg1))>which.max(k)
k=c()
for(j in 65:1400){
Buy=(predict(reg1))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1) #出手：(1,1)=0,(1,0)=1 沒有出手：(0,1)=0,(0,0)=0
if(sum(Buy,na.rm = T)>40){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(reg1))>which.max(k)
times=sum(Buy,na.rm = T)
k=c()
for(j in 65:1400){
Buy=(predict(reg1))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1) #出手：(1,1)=0,(1,0)=1 沒有出手：(0,1)=0,(0,0)=0
if(sum(Buy,na.rm = T)>30){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(reg1))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
print(times)
reg2=lm(y~log(GDP)+Exchange+Unemploy_fall2+CC_rise2+Interest_fall2+CPI_rise2+CPI_fall2+t)
summary(reg2)
AIC(reg2)
summary(predict(reg2))
k=c()
for(j in 65:1800){
Buy=(predict(reg2))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1) #出手：(1,1)=0,(1,0)=1 沒有出手：(0,1)=0,(0,0)=0
if(sum(Buy,na.rm = T)>30){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(reg1))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
print(times)
#Third (Step) Model
rdc.model=lm(y~0)
fwd.model=step(rdc.model,direction = "both",scope=(~(log(GDP)+Exchange+Unemploy+CC+Interest+CPI+Unemploy_fall2+CC_rise2+Interest_fall2+CPI_rise2+CPI_fall2)^5))
k=c()
for(j in 60:1400){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1) #出手：(1,1)=0,(1,0)=1 沒有出手：(0,1)=0,(0,0)=0
if(sum(Buy,na.rm = T)>64){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
print(times)
k=c()
for(j in 60:1400){
Buy=(predict(fwd.model))>j
Success=((Buy+rise)==2)
Fail=((Buy-rise)==1) #出手：(1,1)=0,(1,0)=1 沒有出手：(0,1)=0,(0,0)=0
if(sum(Buy,na.rm = T)>30){
k[j]=sum(Success)/sum(Success+Fail)
}
}
max(k,na.rm = T)
Buy=(predict(fwd.model))>which.max(k)
#計算出首次數
times=sum(Buy,na.rm = T)
print(times)
